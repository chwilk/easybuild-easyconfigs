# quick and dirty install of IBM XL components
# RPM sources can be found in the xlC/xlf installation files
#

easyblock = "XLRpm"

name = 'xlfbase'
version = '15.1.0.0'
basever = version
rdate = '140509'
arch = 'ppc64'
xlmassver = '8.1.0.0'
xlsmpver = '4.1.0.0'
gccsver = '447'  # system-installed gcc
#Core = 'Core'  # if using hierarchical MNS
Core = ''  # if using flat MNS

homepage = 'http://www.ibm.com/us/en/'
description = """IBM XL FORTRAN for Linux (SLES11/RHEL6)"""

toolchain = {'name': 'dummy', 'version': 'dummy'}

dependencies = [
    ('xlmass', xlmassver),
    ('xlsmp', xlsmpver),
]

# order is important
# this leads to "rte.msg" errors
#sources = [
#    'xlf.%s-%s-%s.%s.rpm' % (version[0:6], version, rdate, arch),
#    'xlf.msg.rte-%s-%s.%s.rpm' % (version, rdate, arch),
#    'xlf.rte-%s-%s.%s.rpm' % (version, rdate, arch),
#    'libxlf-devel.%s-%s-%s.%s.rpm' % (version[0:6], version, rdate, arch),
#    'xlf-license.%s-%s-%s.%s.rpm' % (version[0:6], version, rdate, arch),
#]

sources = [
    'xlf.msg.rte-%s-%s.%s.rpm' % (version, rdate, arch),  # no xlf deps
    'xlf.rte-%s-%s.%s.rpm' % (version, rdate, arch),  # needs xlf.msg.rte
    'libxlf-devel.%s-%s-%s.%s.rpm' % (version[0:6], version, rdate, arch),  # needs xlf.rte
    'xlf-license.%s-%s-%s.%s.rpm' % (version[0:6], version, rdate, arch),  # no xlf deps
    'xlf.%s-%s-%s.%s.rpm' % (version[0:6], version, rdate, arch),  # needs libxlf-devel and xlf.license
]


postinstall = 'RUNPOST'  # cause RPM %post scripts to run

sanity_check_paths = {
     'dirs': ["xlf/%s/%s" % (version[0:6], x) for x in
               ["bin", "etc", "include", "lib", "lib64", "msg"]] +
             ["%s" % x for x in ["lib", "lib64"]],
     'files': ["xlf/%s/%s" % (version[0:6], x) for x in
                ["include/fpdc.h", "lib64/libxl.a", "lib64/libxlf90.so"]] +
              ["%s/libxlf90.so.1" % x for x in ["lib", "lib64"]]
}

# configure
postinstallcmds = [
    ('/bin/cp $EASYBUILD_SOURCEPATH/%s/%s/xlf_configure $EASYBUILD_PREFIX/software/%s/%s/%s/xlf/%s/bin/xlf_configure' % (name[0:1], name, Core, name, version, version[0:6])),
    ('$EASYBUILD_PREFIX/software/%s/xlfbase/%s/xlf/%s/bin/xlf_configure -force -gcc /usr -gcc64 /usr -smp $EASYBUILD_PREFIX/software/%s/xlsmp/%s/xlsmp/%s -smprt $EASYBUILD_PREFIX/software/%s/xlsmp/%s -mass $EASYBUILD_PREFIX/software/%s/xlmass/%s/xlmass/%s -xlflic $EASYBUILD_PREFIX/software/%s/xlfbase/%s/xlf/%s -xlf $EASYBUILD_PREFIX/software/%s/xlfbase/%s/xlf/%s -xlfrt $EASYBUILD_PREFIX/software/%s/xlfbase/%s $EASYBUILD_PREFIX/software/%s/xlfbase/%s/xlf/%s/etc/xlf.base.cfg -o $EASYBUILD_PREFIX/software/%s/xlfbase/%s/xlf/%s/etc/xlf.cfg.rhel6.5.gcc%s' % (Core, basever, basever[0:6],  Core, xlsmpver, xlsmpver[0:5],  Core, xlsmpver,  Core, xlmassver, xlmassver[0:5],  Core, basever, basever[0:6],  Core, basever, basever[0:6],  Core, basever,  Core, basever, basever[0:6],  Core, basever, basever[0:6], gccsver)),
]

modextrapaths = {
    'PATH': 'xlf/%s/bin' % version[0:6],
}

modextravars = {
    'OBJECT_MODE': '64',
}

# EOF
